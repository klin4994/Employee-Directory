{"version":3,"sources":["components/Table.js","App.js","index.js"],"names":["Table","columns","data","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","useState","firstNameSearch","setFirstNameSearch","lastNameSearch","setLastNameSearch","value","onChange","e","target","undefined","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","row","i","getRowProps","cells","cell","getCellProps","App","setData","useEffect","a","axios","result","results","console","log","useMemo","Header","accessor","canSort","className","ReactDOM","document","getElementById"],"mappings":"gPAgFeA,MA7Ef,YAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EAU1BC,mBACA,CACIF,UACAC,QAEJE,aACAC,aAZFC,EAJ4B,EAI5BA,cACAC,EAL4B,EAK5BA,kBACAC,EAN4B,EAM5BA,aACAC,EAP4B,EAO5BA,KACAC,EAR4B,EAQ5BA,WACAC,EAT4B,EAS5BA,UAT4B,EAmBgBC,mBAAS,IAnBzB,mBAmBvBC,EAnBuB,KAmBNC,EAnBM,OAoBcF,mBAAS,IApBvB,mBAoBvBG,EApBuB,KAoBPC,EApBO,KAkC9B,OACI,gCACI,uBACIC,MAAOJ,EACPK,SAfkB,SAAAC,GAC1B,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCP,EAAmBG,GACnBN,EAAU,aAAcM,IAahBK,YAAa,yBAEjB,uBACIL,MAAOF,EACPG,SAdiB,SAAAC,GACzB,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAkBC,GAClBN,EAAU,YAAaM,IAYfK,YAAa,wBAEjB,kDAAWhB,KAAX,cACA,gCACKE,EAAae,KAAI,SAAAC,GAAW,OAC7B,8CAAQA,EAAYC,uBAApB,aACKD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC/B,+CAAQA,EAAOC,eAAeD,EAAOE,yBAArC,cAA+DF,EAAOG,OAAO,UAC5E,wCAQT,iDAAWvB,KAAX,aACKE,EAAKc,KAAI,SAACQ,EAAKC,GAEhB,OADAtB,EAAWqB,GAEP,8CAAQA,EAAIE,eAAZ,aACCF,EAAIG,MAAMX,KAAI,SAAAY,GACX,OAAO,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKL,OAAO,+BCTxDO,MAvDjB,WAAe,MAEazB,mBAAS,IAFtB,mBAEJV,EAFI,KAEEoC,EAFF,KAKXC,qBAAU,WACR,sBAAC,4BAAAC,EAAA,sEAEsBC,IAAM,yCAF5B,OAEOC,EAFP,OAGCJ,EAAQI,EAAOxC,KAAKyC,SACpBC,QAAQC,IAAIH,EAAOxC,KAAKyC,SAJzB,0CAAD,KAMC,IAEH,IAAM1C,EAAU6C,mBACZ,iBAAM,CACJ,CAEEC,OAAQ,oDAER9C,QAAS,CACP,CACE8C,OAAQ,aACRC,SAAU,aACVC,SAAS,GAEX,CACEF,OAAQ,YACRC,SAAU,aAEZ,CACED,OAAQ,SACRC,SAAU,UAEZ,CACED,OAAQ,eACRC,SAAU,SAEZ,CACED,OAAQ,MACRC,SAAU,gBAKlB,IAGJ,OACI,qBAAKE,UAAU,MAAf,SACA,cAAC,EAAD,CAAOjD,QAASA,EAASC,KAAMA,O,MCjDvCiD,IAASrB,OAAO,cAAC,EAAD,IAASsB,SAASC,eAAe,W","file":"static/js/main.e596384b.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport { useTable, useFilters, useSortBy} from \"react-table\";\r\nimport \"./index.css\"\r\nfunction Table({ columns, data }) {\r\n    \r\n    // Use the useTable Hook to send the columns and data to build the table\r\n    const {\r\n      getTableProps, // table props from react-table\r\n      getTableBodyProps, // table body props from react-table\r\n      headerGroups, // headerGroups that includes all headers\r\n      rows, // rows for the table\r\n      prepareRow, // Prepare the row before getting the row props\r\n      setFilter, // sets filters for columns\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data\r\n        },\r\n        useFilters,\r\n        useSortBy\r\n    );\r\n    // Create states for searching/filtering functionalities\r\n    const [firstNameSearch, setFirstNameSearch] = useState(\"\");\r\n    const [lastNameSearch, setLastNameSearch] = useState(\"\");\r\n    \r\n    // Update the first name state when input changes\r\n    const handleFirstNameChange = e => {\r\n        const value = e.target.value || undefined;\r\n        setFirstNameSearch(value);\r\n        setFilter(\"name.first\", value)\r\n    };\r\n    // Update the last name state when input changes\r\n    const handleLastNameChange = e => {\r\n        const value = e.target.value || undefined;\r\n        setLastNameSearch(value);\r\n        setFilter(\"name.last\", value)\r\n    };\r\n    return (\r\n        <div>\r\n            <input\r\n                value={firstNameSearch}\r\n                onChange={handleFirstNameChange}\r\n                placeholder={\"Search first name...\"}\r\n            />\r\n            <input\r\n                value={lastNameSearch}\r\n                onChange={handleLastNameChange}\r\n                placeholder={\"Search last name...\"}\r\n            />\r\n            <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                    {headerGroup.headers.map(column => (\r\n                    <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render(\"Header\")}\r\n                     <span>\r\n                  </span>\r\n                    </th>\r\n                    ))}\r\n                </tr>\r\n                ))}\r\n            </thead>\r\n            \r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                prepareRow(row);\r\n                return (\r\n                    <tr {...row.getRowProps()}>\r\n                    {row.cells.map(cell => {\r\n                        return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n                    })}\r\n                    </tr>\r\n                );\r\n                })}\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect, useMemo} from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Table from \"./components/Table\";\r\n\r\nfunction App() {\r\n    // data state to store the randomly generated API data\r\n    const [data, setData] = useState([]);\r\n  \r\n    // useEffect method to set the state for data once the component is mounted\r\n    useEffect(() => {\r\n      (async () => {\r\n        // query to retrieve sets of data for 20 different users\r\n        const result = await axios(\"https://randomuser.me/api/?results=20\");\r\n        setData(result.data.results)\r\n        console.log(result.data.results)\r\n      })();\r\n    }, []);\r\n    // columns for the table\r\n    const columns = useMemo(\r\n        () => [\r\n          {\r\n            // Table header\r\n            Header: \"Employee Directory (click headings below to sort)\",\r\n            // Table columns\r\n            columns: [\r\n              {\r\n                Header: \"First name\",\r\n                accessor: \"name.first\", \r\n                canSort: true \r\n              },\r\n              {\r\n                Header: \"Last name\",\r\n                accessor: \"name.last\",  \r\n              },\r\n              {\r\n                Header: \"Gender\",\r\n                accessor: \"gender\"\r\n              },\r\n              {\r\n                Header: \"Phone number\",\r\n                accessor: \"phone\"\r\n              },\r\n              {\r\n                Header: \"Age\",\r\n                accessor: \"dob.age\"\r\n              }\r\n            ]\r\n          },\r\n        ],\r\n        []\r\n      );\r\n\r\n    return (\r\n        <div className=\"App\">\r\n        <Table columns={columns} data={data} />\r\n        </div>\r\n    );\r\n}\r\n  \r\n  export default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}